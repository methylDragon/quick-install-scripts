# Save current path to go back later
starting_path=$(pwd)


echo "
            * * *

           .     .
        .  |\-^-/|  .    
       /| } O.=.O { |\ 

[ROS-LINO QUICK SETUP SCRIPT]


            * * *

The Robot Operating System (ROS) is a widely used framework and ecosystem for Robotics!

WARNINGS
--------
- Please only run this on a computer with Ubuntu 16.04/18.04 or derivatives!

- If you're on a less powerful computer for your robot (like an Raspberry Pi), please ensure you create sufficient swap-space FIRST, otherwise the install -WILL- fail due to lack of RAM. 1-2GB should be sufficient.

Here's a guide: https://www.tecmint.com/create-a-linux-swap-file/

Then type 'ok' and press [enter] to continue


INSTALLS
--------
- ROS Kinetic/Melodic (tailored to your uses)
- Linorobot (One of the many stacks for robot base essentials)

MISC
----
If you'd like to see how to install it yourself, see:
http://wiki.ros.org/kinetic/Installation/Ubuntu (For 16.04)
http://wiki.ros.org/melodic/Installation/Ubuntu (For 18.04)
https://github.com/linorobot/linorobot

Author: github.com/methylDragon
"

while [ -z "$warning_read" ]; do
  read -p "Please read the warning: " answer

  case "$answer" in
    [Oo][Kk]) warning_read="TRUE" ;;
    *) echo -e "\nInvalid response!\n" ;;
  esac
done

# Reset timer
SECONDS=0

echo -e "\n-- INITIALISING INSTALL --"

# USER PROMPT FOR PLATFORM

while [ -z "$platform" ]; do
  read -p "
Please select the current platform you are on now. (Enter r for robot or c for computer)
Type your choice and press [enter]: " answer

  case "$answer" in
    [Rr]|[Rr]obot) platform="ROBOT" ;;
    [Cc]|[Cc]omputer) platform="COMPUTER" ;;
    *) echo -e "\nInvalid response!\nPlease choose [r]obot or [c]omputer!" ;;
  esac
done

echo -e "\n$platform selected\n"

# CONFIGURE ROS DISTRIBUTION TO INSTALL

ARCH=$(uname -i)
RELEASE=$(lsb_release -c -s)

if [ $RELEASE == "xenial" ]
  then
    ROSDISTRO=kinetic
       
elif [ $RELEASE == "bionic" ]
  then
    ROSDISTRO=melodic

else
  echo -e "There's no ROS Distro compatible for your platform :( Sorry!\nPlease make sure you have Ubuntu 16.04 or 18.04!"
    exit 1
fi

echo -e "
                    /^\ 
                   |   |
             /\     |_|     /\ 
             | \___/Â´ \`\___/ |
              \_/  \___/  \_/
               |\__/ROS\__/|
               |/  \___/  \|
              ./\__/   \__/\.
              | /  \___/  \ |
              \/     V     \/

== ROS $ROSDISTRO installation initialising! ==
Preparing for groundbreaking robot stuff...
"


# Add ROS Sources

echo "Updating sources..."

sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

wget http://packages.ros.org/ros.key -O - | sudo apt-key add -

sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116

sudo apt-get update > /dev/null
sudo apt-get -y install dpkg

# Install the appropriate ROS

echo -e "\n== INSTALLING ROS $ROSDISTRO =="
echo -e "\nPlease be patient! This can take quite a while... (5-30 minutes)"

if [ "$platform" == 'COMPUTER' ]
then
  sudo apt-get -qq install ros-$ROSDISTRO-desktop-full -y
  echo "ROS $ROSDISTRO full pack installed"
elif [ "$platform" == 'ROBOT' ]
then
  sudo apt-get -qq install ros-$ROSDISTRO-ros-base -y
  echo "ROS $ROSDISTRO lightweight (robot) pack installed"
else
  echo "Something broke!"
  read -p "Exiting script... Try again!"
  exit 1
fi

# Resolve rosdep

echo -e "\nResolving dependencies..."

sudo c_rehash /etc/ssl/certs
sudo rosdep init
rosdep update

echo -e "\nDONE!"

# Install ROS build dependencies

echo -e "\n== INSTALLING ROS BUILDDEPS =="
sudo apt-get -qq install python-rosinstall python-rosinstall-generator python-wstool build-essential -y

echo "DONE!"

# Append to ~/.bashrc

echo -e "\n== Setting up ROS environment =="

source /opt/ros/$ROSDISTRO/setup.bash
mkdir -p $HOME/catkin_ws/src
cd $HOME/catkin_ws
catkin_make

echo -e "\ncatkin_ws created"

# Snippet to append to bashrc if not already in

declare -a file_appends=(
  "source /opt/ros/$ROSDISTRO/setup.bash"
  'source ~/catkin_ws/devel/setup.bash'
)

target_file="$HOME/.bashrc"

for i in "${file_appends[@]}" ; do
  if ! grep -Fxq "$i" "$target_file" ; then
    echo "$i" >> "$target_file"
  else
    :
  fi
done

source ~/.bashrc
echo -e "DONE!\n"

# Clone Linorobot repo

read -p "Beginning Linorobot install. Files will be downloaded to Home. Press [enter] to continue"

cd $HOME
git clone https://github.com/linorobot/lino_install


# Get Linorobot install parameters

while [ -z "$lino_robot_base" ]; do
  read -p "
What robot base are you using? (2wd, 4wd, mecanum, ackermann)
Type your choice and press [enter]: " answer

  case "$answer" in
    2wd) lino_robot_base=2wd ;;
    4wd) lino_robot_base=4wd ;;
    mecanum) lino_robot_base=mecanum ;;
    ackermann) lino_robot_base=ackermann ;;
    *) echo -e "\nInvalid response!\nPlease choose 2wd, 4wd, mecanum, or ackermann!\n" ;;
  esac
done

echo -e "\nTargeting install for a $lino_robot_base robot"

while [ -z "$lino_sensor" ]; do
  read -p "
What robot sensor/lidar are you using? (xv11, rplidar, kinect, realsense, other)
Type your choice and press [enter]: " answer

  case "$answer" in
    xv11) lino_sensor=xv11 ;;
    rplidar) lino_sensor=rplidar ;;
    kinect) lino_sensor=kinect ;;
    realsense) lino_sensor=realsense ;;
    other)
        echo "
WARNING
-------
Unfortunately, the lino_install script only supports the above few sensors.
If you're using anything else, you're probably not a beginner and should be able to handle the following instructions to customise your Linorobot stack to support your sensors/lidars.

We'll implement the rplidar support first. You will have to configure the stack to support your components.

1. Edit the LINOLIDAR variable in your ~/.bashrc file
2. Find an appropriate driver and ROS node for your sensor, and install/catkin_make them
3. Create a launch file to run the node (see laser.launch in the linorobot package for a hint)
4. Ensure the launch file has the same name as whatever value you put for LINOLIDAR
"
        lino_sensor=rplidar
        ;;
    *) echo -e "\nInvalid response!\nPlease choose xv11, rplidar, kinect, realsense, or other!\n" ;;
  esac
done

echo -e "\nTargeting install for $lino_sensor\n"


# Invoke lino_install

echo -e "\n== BEGINNING LINOROBOT INSTALL ==\n"
cd lino_install
sed -i 's/set -e//g' install
chmod +x install
read -p "Please pay attention to the install log! Press [enter] to continue."
./install "$lino_robot_base" "$lino_sensor"

# Snippet to append to bashrc if not already in

declare -a file_appends=(
  'source ~/linorobot_ws/devel/setup.bash'
  "export LINOBASE=$lino_robot_base"
  "export LINOLIDAR=$lino_sensor"
)

target_file="$HOME/.bashrc"

for i in "${file_appends[@]}" ; do
  if ! grep -Fxq "$i" "$target_file" ; then
    echo "$i" >> "$target_file"
  else
    :
  fi
done

echo -e "\nLinorobot installed!"


# Setting up Linorobot development tools

echo -e "\n== Configuring Linorobot Devtools ==\n"

cd ~/catkin_ws/src
git clone https://github.com/linorobot/lino_pid.git
git clone https://github.com/linorobot/lino_msgs.git
git clone https://github.com/linorobot/lino_visualize.git
sudo apt-get install ros-$(rosversion -d)-teleop-twist-keyboard
cd .. && catkin_make

# And laser filters!
sudo apt-get install ros-$(rosversion -d)-laser-filters

# Rebuild the ROS package tree
rospack profile

echo -e "\nDone!"

echo "

                 .     .
              .  |\-^-/|  .    
             /| } O.=.O { |\ 

                   ***

   == ! ROS INSTALLATION COMPLETE ! ==
== GO FORTH AND BUILD MARVELOUS THINGS ==


TUTORIALS:
https://github.com/methylDragon/coding-notes (ROS basics and syntax)
http://linorobot.org (Linorobot stack setup)

             - ! CH3EERS ! -
"

# Print time elapsed
if (( $SECONDS > 3600 )) ; then
    let "hours=SECONDS/3600"
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    echo -e "\n\nCompleted in $hours hour(s), $minutes minute(s) and $seconds second(s)" 
elif (( $SECONDS > 60 )) ; then
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    echo -e "\n\nCompleted in $minutes minute(s) and $seconds second(s)"
else
    echo -e "\n\nCompleted in $SECONDS seconds"
fi

# Restart bash to source ~/.bashrc and go back to the current path

cd "$starting_path"
exec bash
