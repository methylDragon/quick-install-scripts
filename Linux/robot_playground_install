# Save current path to go back later
starting_path=$(pwd)


echo "
            * * *

           .     .
        .  |\-^-/|  .    
       /| } O.=.O { |\ 

[ROBOT_PLAYGROUND QUICK SETUP SCRIPT]


            * * *

A ClearPath Robotics Jackal Simulation running on Linorobot's Navigation Stack parameters!

WARNINGS
--------
- Please only run this on a computer with Ubuntu 16.04/18.04 or derivatives!
- Please ensure you've run the ros_lino_base_install script first, and have a linorobot_ws directory!

- If you're on a less powerful computer for your robot (like an Raspberry Pi), please ensure you create sufficient swap-space FIRST, otherwise the install -WILL- fail due to lack of RAM. 1-2GB should be sufficient.

Here's a guide: https://www.tecmint.com/create-a-linux-swap-file/

Then type 'ok' and press [enter] to continue


INSTALLS
--------
- robot_playground

MISC
----
If you'd like to see how to install it yourself, see:
https://github.com/grassjelly/robot_playground

Author: github.com/methylDragon
"

while [ -z "$warning_read" ]; do
  read -p "Please read the warning: " answer

  case "$answer" in
    [Oo][Kk]) warning_read="TRUE" ;;
    *) echo -e "\nInvalid response!\n" ;;
  esac
done

# Reset timer
SECONDS=0

echo -e "\n-- INITIALISING INSTALL --"

cd ~/linorobot_ws/src

echo -e "\n-- CLONING ROBOT PLAYGROUND REPOSITORY --"

git clone https://github.com/grassjelly/robot_playground.git

echo -e "\n-- RESOLVING DEPENDENCIES --"

cd robot_playground

./installdep

cd ../

git clone https://github.com/grassjelly/jackal.git
git clone https://github.com/jackal/jackal_simulator.git
git clone https://github.com/jackal/jackal_desktop.git
git clone https://github.com/ros-visualization/interactive_marker_twist_server.git

cd ../

echo -e "\n-- BUILDING PACKAGE --"

catkin_make
source devel/setup.bash

echo -e "\nDone!"

echo "

                 .     .
              .  |\-^-/|  .    
             /| } O.=.O { |\ 

                   ***

     == ! INSTALLATION COMPLETE ! ==
== GO FORTH AND BUILD MARVELOUS THINGS ==

             - ! CH3EERS ! -
"

# Print time elapsed
if (( $SECONDS > 3600 )) ; then
    let "hours=SECONDS/3600"
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    echo -e "\n\nCompleted in $hours hour(s), $minutes minute(s) and $seconds second(s)" 
elif (( $SECONDS > 60 )) ; then
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    echo -e "\n\nCompleted in $minutes minute(s) and $seconds second(s)"
else
    echo -e "\n\nCompleted in $SECONDS seconds"
fi

# Restart bash to source ~/.bashrc and go back to the current path

cd "$starting_path"
exec bash
